/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linter;

import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;

public class App {

    public static void main(String[] args) throws IOException {
        int[][] dummyDATA = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };

        List<String> dummyVotes = new ArrayList<>();
        dummyVotes.add("Bush");
        dummyVotes.add("Bush");
        dummyVotes.add("Bush");
        dummyVotes.add("Shrub");
        dummyVotes.add("Hedge");
        dummyVotes.add("Shrub");
        dummyVotes.add("Shrub");
        dummyVotes.add("Bush");
        dummyVotes.add("Hedge");
        dummyVotes.add("Bush");

        Path alice = Paths.get("linterCode.js");

        String winner = tally(dummyVotes);

        weatherData(dummyDATA, 72, 51);

        linter(alice);
    }

    public static int weatherData(int[][] weeklyTemps, int high, int low){


        HashSet<Integer> tempdata = new HashSet<>();
        int notSeen = 0;

        for(int i =0; i < weeklyTemps.length; i++){
            for (int j = 0; j < weeklyTemps[i].length; j++){
                tempdata.add(weeklyTemps[i][j]);
            }
        }

        System.out.println("High: " + high);
        System.out.println("Low: " + low);

        for (int i = low; i <= high; i++ ){
            if(!tempdata.contains(i)){
                System.out.println("Never saw Temp: " + i);
                notSeen = i;
            }
        }

        return notSeen;
    }

    public static String tally(List<String> votes){

        HashMap<String, Integer> voteCounter = new HashMap<>();

        for(int i = 0;  i < votes.size(); i++){
            int count = 0;
            Integer inInt = Integer.valueOf(count);

            voteCounter.put(votes.get(i),inInt);

            if(voteCounter.containsKey(votes.get(i))){
                voteCounter.put(votes.get(i), voteCounter.get(votes.get(i) + 1));
            }
        }

        return "winner";
    }

    public static String linter(Path file) throws IOException {

        String output = "nothing yet";
        Scanner scan = null;
        scan = new Scanner(file);

        for(int i = 1; scan.hasNextLine(); i++){

            String checkLine = scan.nextLine();

            if (!checkLine.endsWith(";")){
                if(checkLine.endsWith("{") || checkLine.endsWith("}")){
                    continue;
                }else if (checkLine.contains("if") || checkLine.contains("else")){
                    continue;
                } else if (checkLine.isEmpty()) {
                    continue;
                } else {
                    System.out.println("Line " + i + " is missing semicolon");
                    output = ("Line " + i + " is missing semicolon");
                }
            }
        }


        return output;
    }

}
